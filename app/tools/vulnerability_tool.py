from mcp.types import TextContent

from app.exceptions import (
    VulnerabilityNotFoundException,
    VulnerabilitiesNotFoundException
)
from app.services import (
    read_vulnerabilitiy_by_id,
    read_vulnerabilities_by_cwe_id,
    read_vulnerabilities_by_exploit_id
)
from app.utils import as_text_content, json_encoder


async def get_vulnerability_tool(
    vulnerability_id: str
) -> list[TextContent]:
    try:
        out = await read_vulnerabilitiy_by_id(vulnerability_id)
        return await as_text_content(await json_encoder(out))
    except VulnerabilityNotFoundException:
        return [TextContent(type="text", text=f"Vulnerability {vulnerability_id} not found.")]
    except Exception as e:
        return [TextContent(type="text", text=f"Error: {e!s}")]


async def get_vulnerabilities_by_cwe_tool(
    cwe_id: str
) -> list[TextContent]:
    try:
        out = await read_vulnerabilities_by_cwe_id(cwe_id)
        return await as_text_content(await json_encoder(out))
    except VulnerabilitiesNotFoundException:
        return [TextContent(type="text", text=f"Vulneraribilities not found for {cwe_id}.")]
    except Exception as e:
        return [TextContent(type="text", text=f"Error: {e!s}")]
    

async def get_vulnerabilities_by_exploit_tool(
    exploit_id: str
) -> list[TextContent]:
    try:
        out = await read_vulnerabilities_by_exploit_id(exploit_id)
        return await as_text_content(await json_encoder(out))
    except VulnerabilitiesNotFoundException:
        return [TextContent(type="text", text=f"Vulneraribilities not found for {exploit_id}.")]
    except Exception as e:
        return [TextContent(type="text", text=f"Error: {e!s}")]
