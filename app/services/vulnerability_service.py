from typing import Any

from app.exceptions import (
    VulnerabilityNotFoundException,
    VulnerabilitiesNotFoundException
)

from .dbs import get_collection


async def read_vulnerabilitiy_by_id(vulnerability_id: str) -> dict[str, Any]:
    vulnerabilities_collection = get_collection("vulnerabilities")
    result = await vulnerabilities_collection.find_one(
        {
            "id": vulnerability_id
        }
    )
    if not result:
        raise VulnerabilityNotFoundException()
    return result

async def read_vulnerabilities_by_cwe_id(cwe_id: str) -> list[dict[str, Any]]:
    vulnerabilities_collection = get_collection("vulnerabilities")
    cursor = vulnerabilities_collection.find(
        {
            "cwes": {"$in": [cwe_id]}
        }
    )
    results = await cursor.to_list(length=None)
    if not results:
        raise VulnerabilitiesNotFoundException()
    return results


async def read_vulnerabilities_by_exploit_id(exploit_id: str) -> list[dict[str, Any]]:
    vulnerabilities_collection = get_collection("vulnerabilities")
    cursor = vulnerabilities_collection.find(
        {
            "exploits": {"$in": [exploit_id]}
        }
    )
    results = await cursor.to_list(length=None)
    if not results:
        raise VulnerabilitiesNotFoundException()
    return results
